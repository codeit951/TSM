@rendermode InteractiveServer
@inject DynamicStateContainer State
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="tradingview-widget-container">
    <div id="tradingview_e8053"></div>
</div>
@code {
    private string tradingView = "BITGET:BTCUSDT";
    private IJSObjectReference? module;
    private DotNetObjectReference<TradingViewComponent>? objRef;
    private IDisposable subscription;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the TradingView script once
            await JSRuntime.InvokeVoidAsync("eval", new object[] { "const tvScript = document.createElement('script'); tvScript.async = true; tvScript.src = 'https://s3.tradingview.com/tv.js'; document.head.appendChild(tvScript);" });
            objRef = DotNetObjectReference.Create(this);
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./static/js/tradingView.js");
            UpdateWidget();
        }
    }

    protected override void OnInitialized()
    {
        subscription = State.Observe<string>("TradeView")
            .Subscribe(_ => UpdateWidget());
        
    }


    private async void UpdateWidget()
    {
        tradingView = State.GetValue<string>("TradeView");
        if (module != null)
        {
            try
            {
                await module.InvokeVoidAsync("updateTradingView", "tradingview_e8053", tradingView);
            }
            catch (Exception)
            {
            }
            
        }
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("disposeTradingView", "tradingview_e8053");
            await module.DisposeAsync();
        }
        subscription?.Dispose();
        objRef?.Dispose();
        GC.SuppressFinalize(this);
    }
}
