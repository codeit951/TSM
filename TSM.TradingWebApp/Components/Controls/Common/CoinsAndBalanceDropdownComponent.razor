
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject DynamicStateContainer State
<div class="css-1kyvdx0">
    <div class="css-1ug4zh5"></div>
    <div class="full scrollbar-hide css-cg9ir8 coinsbalarea" id="@elementId" style="@(IsOpen ? "display:block;" : "display:none;")">
        <div class="css-bp1l2g">
            <div class="search_box">
                <div class="css-g70r1a">
                    <Icon Name="IconName.Search"/>
                    <input placeholder="Search for assets"
                    class="no-zoom-14px"
                    @bind="searchQuery"
                    @bind:event="oninput" />
                </div>
            </div>
            <div class="scrollable scrollbar-hide">
                @if (isLoading)
                {
                    <div class="loading-indicator justify-content-around"><Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" /></div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }
                @if (!isLoading)
                {
                    foreach (var asset in FilteredAssets)
                    {
                        <div class="asset-item"
                        style="display: flex; align-items: center; justify-content: space-between;"
                        @onclick="(() => OnClickAsset(asset))">
                            <span class="asset_item">
                                <img loading="lazy"
                                width="16"
                                src="@GetAssetImage(asset)"
                                alt="@asset.Name" />
                                <p>@asset.Name</p>
                            </span>
                            <span class="asset_item_right">
                                <p>$@asset.Value.ToString("N2")</p>
                                <p>@asset.Amount @asset.Symbol</p>
                            </span>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private IEnumerable<Asset> assets = new List<Asset>();
    private bool isLoading;
    private string errorMessage;

    [Parameter]
    public User? user { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public string SelectedType { get; set; } = "Crypto";

    [Parameter]
    public EventCallback<string> SelectedTypeChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnSelect { get; set; }

    [Parameter]
    public IEnumerable<Asset> AssetList { get; set; } = new List<Asset>();

    [Parameter]
    public Func<string, Task<IEnumerable<Asset>>> DataFetchDelegate { get; set; }

    [Parameter]
    public string elementId { get; set; } = string.Empty;

    private IEnumerable<Asset> FilteredAssets => AssetList?
        .Where(a => a.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    a.Symbol.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .OrderBy(a => a.Name) ?? Enumerable.Empty<Asset>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadAssetsAsync();
    }

    private async Task LoadAssetsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            if (DataFetchDelegate != null)
            {
                AssetList = await DataFetchDelegate(SelectedType);
            }
            else
            {
                AssetList = SelectedType switch
                {
                    "Crypto" => await GetCryptoAssetsAsync(),
                    "Stocks" => await GetStockAssetsAsync(),
                    "Forex" => await GetForexAssetsAsync(),
                    _ => await GetCryptoAssetsAsync()
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load assets: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnClickAsset(Asset asset)
    {
        try
        {
            State.SetValue("TradeView", asset.tv);
            await OnSelect.InvokeAsync(asset.Symbol);
            await ToggleDropdown(false);
        }
        catch (Exception ex)
        {
            errorMessage = $"Selection failed: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task ToggleDropdown(bool show)
    {
        try
        {
            IsOpen = show;
            await IsOpenChanged.InvokeAsync(IsOpen);
        }
        catch (Exception ex)
        {
            errorMessage = $"Toggle failed: {ex.Message}";
        }
    }

    private string GetAssetImage(Asset asset)
    {
        return $"/asseticons/{asset.Symbol.ToLower()}.png";
    }

    // Sample async implementations
    private async Task<List<Asset>> GetCryptoAssetsAsync()
    {
        if (user?.Balances == null)
            return new List<Asset>();

        var assets = new List<Asset>();

        foreach (var balance in user.Balances)
        {
            if (balance.Asset?.AssetType == "Crypto" &&
                balance.Asset.Status == StatusType.Active)
            {
                assets.Add(new Asset(
                    Name: balance.Asset.AssetName,
                    Symbol: balance.Asset.AssetSymbol,
                    Value: balance.Available * await GetCryptoCurrentPriceAsync(balance.Asset.AssetSymbol),
                    Amount: balance.Available,
                    tv: balance.Asset.TradingView
                ));
            }
        }

        return assets;
    }

    private async Task<List<Asset>> GetStockAssetsAsync()
    {
        if (user?.Balances == null)
            return new List<Asset>();

        var assets = new List<Asset>();

        foreach (var balance in user.Balances)
        {
            if (balance.Asset?.AssetType == "Stock" &&
                balance.Asset.Status == StatusType.Active)
            {
                assets.Add(new Asset(
                    Name: balance.Asset.AssetName,
                    Symbol: balance.Asset.AssetSymbol,
                    Value: balance.Available * await GetStockCurrentPriceAsync(balance.Asset.AssetSymbol),
                    Amount: balance.Available,
                    tv: balance.Asset.TradingView

                ));
            }
        }

        return assets;
    }

    private async Task<decimal> GetCryptoCurrentPriceAsync(string symbol)
    {
        // Implement actual price fetching logic here
        return PriceService.Prices[symbol];
    }
    private async Task<decimal> GetStockCurrentPriceAsync(string symbol)
    {
        StockPrice stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        return stockPrice.Prices[symbol];
    }

    private async Task<decimal> GetFiatCurrentPriceAsync(string symbol)
    {
        ForexPrice forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        return forexPrice.Prices[symbol];
    }

    private async Task<List<Asset>> GetForexAssetsAsync()
    {
        if (user?.Balances == null)
            return new List<Asset>();

        var assets = new List<Asset>();

        foreach (var balance in user.Balances)
        {
            if (balance.Asset?.AssetType == "Fiat" &&
                balance.Asset.Status == StatusType.Active)
            {
                assets.Add(new Asset(
                    Name: balance.Asset.AssetName,
                    Symbol: balance.Asset.AssetSymbol,
                    Value: balance.Available * await GetFiatCurrentPriceAsync(balance.Asset.AssetSymbol),
                    Amount: balance.Available,
                    tv: balance.Asset.TradingView
                ));
            }
        }

        return assets;
    }

    public record Asset(string Name, string Symbol, decimal Value, decimal Amount, string tv);
}