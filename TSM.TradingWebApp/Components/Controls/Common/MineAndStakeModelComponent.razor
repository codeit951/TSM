@inject UserManager<User> UserManager
@inject UserState State
@inject IAddSMSUseCase AddSMSUseCase

<ToastComponent @ref="toastComponent" Timeout="3000" />
@if (plan is not null&&user is not null)
{
    <div role="presentation" aria-labelledby="modal-modal-title" aria-describedby="modal-modal-description" class="MuiModal-root css-8ndowl" style="display:@(IsActive? "block":"none")">
        <div aria-hidden="true" class="MuiBackdrop-root MuiModal-backdrop css-919eu4" style="opacity: 1; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1);"></div>
        <div tabindex="0" data-testid="sentinelStart"></div>
        <div tabindex="-1" class="css-1ocdasm">
            <div class="modal_top" style="color: white;">
                <p class="modal_top_title">@plan.PlanType @plan.PlanSymbol</p>
                <button @onclick="CloseModal"><Icon Name="IconName.X" /></button>
            </div>
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal_content">
                    <div class="css-v6puf8">
                        <label>Amount:</label>
                        <div class="amountbox_wrapper">
                            <InputNumber @bind-Value="model.Amount" placeholder="0.00" />
                            <span class="amount_select"><p>@plan.PlanSymbol</p></span>
                        </div>
                        <div class="captions">
                            <div class="captions">
                                <span class="caption">
                                    <p>Current @plan.PlanSymbol balance:</p>
                                    @{
                                        var balance = user.Balances.FirstOrDefault(b => b.Asset.AssetSymbol == plan.PlanSymbol);
                                        var canDo = true;
                                    }
                                    @if (balance != null)
                                    {
                                        <p>@balance.Available @plan.PlanSymbol</p>
                                    }
                                    else
                                    {
                                        <p>Asset Not Found. Import!</p>
                                        canDo = false;
                                    }
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="css-1azirga">
                        <label>Duration:</label>
                        <div class="select_wrapper">
                            <InputSelect name="options" @bind-Value="model.Duration" disabled="@isFixed">
                                @for (int i = 1; i <= 20; i++)
                                {
                                    <option value="@i">@i day@(i > 1 ? "s" : "")</option>
                                }
                            </InputSelect>
                            <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                                <g fill="none" fill-rule="evenodd">
                                    <g transform="translate(-1391 -130)" fill="#ffffff">
                                        <g transform="translate(1250 116)">
                                            <path transform="translate(145 17) rotate(180) translate(-145 -17)"
                                            d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                        </g>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                    <div class="css-v6puf8">
                        <label>ROI:</label>
                        <div class="amountbox_wrapper">
                            <input type="number" disabled="" value="@plan.ROI" /><span class="amount_select"><p>%</p></span>
                        </div>
                        <div class="captions">

                            <span class="caption">
                                <p>Estimated ROI:</p>
                                @if (model != null && model.Amount > 0)
                                {
                                    CalculateROI();
                                    <p>@txtROI.ToString("N2") @plan.PlanSymbol</p>
                                }
                                else
                                {
                                    <p>0 @plan.PlanSymbol</p>
                                }
                            </span>
                        </div>

                    </div>
                    <button type="submit" disabled="@(canDo ? null : true)" class="@(canDo ? "" : "disabled") css-nncgg">
                        <p>Submit</p>
                    </button>

                </div>
            </EditForm>
        </div>
        <div tabindex="0" data-testid="sentinelEnd"></div>
    </div>
}
else
{
    <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
        <Placeholder Width="PlaceholderWidth.Col12" />
        <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Large" />
        <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
        <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.ExtraSmall" />
    </PlaceholderContainer>
}
<Preload LoadingText="Loading..." />
@code{
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter]
    public bool IsActive { get; set; }
    [Parameter]
    public EventCallback<bool> IsActiveChanged { get; set; }

    [Parameter]
    public SMSPlan plan { get; set; }

    [Parameter]
    public User user { get; set; }

    private SMSModel model;
    private decimal txtROI;

    private bool isFixed = false; // set this to true to disable the dropdown

    private ToastComponent? toastComponent;
    private string AlertMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (plan != null && model == null)
        {
            model = new SMSModel
                {
                    Min = plan.MinimumAmount,
                    Max = plan.MaximumAmount,
                };
            if (plan.PlanType==SMSTypes.Subscription)
            {
                isFixed = true;
                model.Duration = plan.Cycle;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        PreloadService.Show(SpinnerColor.Light, $"Placing {plan.PlanType}...");
        var sms = new SMS
            {
                Amount = model.Amount,
                Duration = model.Duration,
                PlanType = plan.PlanType,
                UserID = user.UserID,
                PlanID = plan.PlanID,
                PlanSymbol = plan.PlanSymbol,
                PlanName = plan.PlanName,
                ROI = txtROI,
                Balance = model.Amount,
                Interval = plan.Cycle,
                Type=plan.PlanSymbol
            };
        var status = await AddSMSUseCase.ExecuteAsync(sms);
        if (status == "0")
        {
            AlertMessage = $"Insufficient {plan.PlanSymbol} balance!";
            toastComponent?.ShowToast(MyToastType.Danger, "Plan Error", AlertMessage);
        }
        else if (status == "1")
        {
            // Reset the form after placing the trade
            model = new SMSModel();
            AlertMessage = $"{plan.PlanType} Placed Successfully!";
            toastComponent?.ShowToast(MyToastType.Success, "Plan", AlertMessage);
            user = await UserManager.FindByNameAsync(user.Email);
            State.SetCurrentUser(user);
            await CloseModal();
        }
        else if (status == "2")
        {
            AlertMessage = "ASSET NOT FOUND!";
            toastComponent?.ShowToast(MyToastType.Danger, "Plan Error", AlertMessage);
        }
        else if (status == "3")
        {
            AlertMessage = "USER NOT FOUND!";
            toastComponent?.ShowToast(MyToastType.Danger, "Plan Error", AlertMessage);
        }

        PreloadService.Hide();
    }

    private void CalculateROI()
    {
        decimal dailyRoi = (decimal)plan.ROI / ((decimal)model.Duration / (decimal)plan.Cycle);
        decimal roi = ((decimal)model.Amount * dailyRoi) / 100;
        txtROI =  roi;
    }

    private async Task CloseModal()
    {
        model = new SMSModel();
        IsActive = false;
        await IsActiveChanged.InvokeAsync(IsActive);
    }
}