@rendermode InteractiveServer
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject UserState State
@implements IAsyncDisposable

<div class="balance_card_top">
    <div class="balance_card_top_wrapper">
        <div class="balance">
            <span class="balance_wrapper">
                <span class="label">Total Balance</span>
                <button class="eyes_button" @onclick="ToggleBalance">
                    @if (IsBalShow)
                    {
                        <Icon Name="IconName.Eye"></Icon>
                    }
                    else
                    {
                        <Icon Name="IconName.EyeSlash"></Icon>
                    }
                </button>
            </span>
            @if(IsLoaded)
            {
                <span class="user_balance" style="@(IsBalShow?"display: block;":"display: none;")">$@FormatValues.FormatCurrencyWithMinusForBal(TotalBal)</span>
                <h3 class="user_balance hidden" style="@(IsBalShow?"display: none;":"display: block!important;")"><i>*</i><i>*</i><i>*</i><i>*</i><i>*</i><i>*</i></h3>
            }
            else
            {
                <Spinner Color="SpinnerColor.Light" />
            }
        </div>
    </div>
    <div class="balance_card_top_buttons"><button @onclick="ChangeTab" class="balance_card_top_button @(showTab==1?"active":"")"><span><img src="img/wallet.svg" alt="icon"></span></button><button @onclick="ChangeTab" class="balance_card_top_button @(showTab==2?"active":"")"><span><img src="img/file.svg" alt="icon"></span></button></div>
</div>
<div class="balance_card_bottom scrollbar-hide @(showTab==1?"":"hidden")">
    <span>
        <p class="balance_card_bottom_title">
            <p>Top Assets</p>
        </p><button class="assets_button">View all assets</button>
    </span>
    <div class="balance_card_bottom_wrapper">
        @if (user is not null)
        {
            TotalBal = 0.0m;
            foreach (var balance in user.Balances)
            {
                if (price is not null && price.ContainsKey(balance.Asset.AssetSymbol))
                {
                    TotalBal += (price[balance.Asset.AssetSymbol] * balance.Available);
                }
                else if (otherprices is not null && otherprices.ContainsKey(balance.Asset.AssetSymbol))
                {
                    TotalBal += (otherprices[balance.Asset.AssetSymbol] * balance.Available);
                }
                else if (stockprices is not null && stockprices.ContainsKey(balance.Asset.AssetSymbol))
                {
                    TotalBal += (stockprices[balance.Asset.AssetSymbol] * balance.Available);
                }

                if (balance.Asset.IsStar)
                {
                    if (price is not null && price.ContainsKey(balance.Asset.AssetSymbol))
                    {
                        <BalanceListItem Balance="balance" ToUsd="@price[balance.Asset.AssetSymbol]" />
                    }
                    else if (otherprices is not null && otherprices.ContainsKey(balance.Asset.AssetSymbol))
                    {
                        <BalanceListItem Balance="balance" ToUsd="@otherprices[balance.Asset.AssetSymbol]" />
                    }
                    else if (stockprices is not null && stockprices.ContainsKey(balance.Asset.AssetSymbol))
                    {
                        <BalanceListItem Balance="balance" ToUsd="@stockprices[balance.Asset.AssetSymbol]" />
                    }
                    else
                    {
                        <BalanceListItem Balance="balance" />
                    }
                }
            }

        }

    </div>
</div>
<div class="balance_card_bottom scrollbar-hide @(showTab==2?"":"hidden")">
    <span style="display: flex; align-items: center; justify-content: space-between;">
        <p class="balance_card_bottom_title" style="color: rgba(255, 255, 255, 0.8);">
            <p>Account Summary</p>
        </p>
    </span>
    <div class="css-bqmfuh">
        <div class="account_summary_new_item">
            <span>
                <img src="img/deposit.svg" alt="icon">
                <p class="title">Total Deposits</p>
            </span>
            <p class="value">$0.00</p>
            <button class="account_summary_button">
                <p>Deposit</p>
            </button>
        </div>
        <div class="account_summary_new_item">
            <span>
                <img src="img/withdraw.svg" alt="icon">
                <p class="title">Total Withdrawals</p>
            </span>
            <p class="value">$0.00</p>
            <button class="account_summary_button">
                <p>Withdraw</p>
            </button>
        </div>
        <div class="account_summary_new_item">
            <span>
                <img src="img/trade.svg" alt="icon">
                <p class="title">Total Profits</p>
            </span>
            <p class="value">$0.00</p>
            <button class="account_summary_button" style="opacity: 0; user-select: none; pointer-events: none;">
                <p>Profits</p>
            </button>
        </div>
        @if (user is not null && user.Status != StatusType.Active)
        {
            <div class="account_summary_new_item">
                <span>
                    <img src="img/verify.svg" alt="icon">
                    <p class="title">Verification</p>
                </span>
                <p class="value" style="color: rgb(255, 51, 68);">Your account is not verified</p>
            </div>
        }
    </div>
</div>

@code{

    public User? user { get; set; }

    private decimal TotalBal = 0.0m;
    private bool IsBalShow = true;
    private bool IsLoaded = false;

    private Dictionary<string, decimal>? price;

    private ForexPrice forexPrice;
    private Dictionary<string, decimal>? otherprices;

    private StockPrice stockPrice;
    private Dictionary<string, decimal>? stockprices;

    private IDisposable _subscription;

    protected override async Task OnInitializedAsync()
    {
        price = PriceService.Prices;
        PriceService.OnPriceUpdated += HandlePriceUpdate;

        forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        otherprices = forexPrice.Prices;

        stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        stockprices = stockPrice.Prices;

        _subscription = State.CurrentUserObservable
       .Subscribe(Cuser =>
       {
           user = Cuser;
           StateHasChanged();
       });
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
    }

    private void HandlePriceUpdate(Dictionary<string, decimal> newPrice)
    {
        price = newPrice;
        IsLoaded = true;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PriceService.OnPriceUpdated -= HandlePriceUpdate;
    }

    private int showTab = 1;

    private void ChangeTab()
    {
        showTab = showTab == 1 ? 2 : 1;
    }

    private void ToggleBalance()
    {
        IsBalShow = !IsBalShow;
        StateHasChanged();
    }
}