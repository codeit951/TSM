@rendermode InteractiveServer
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject IJSRuntime JS
@inject UserState userState
@implements IAsyncDisposable
@inject IAddTradeUseCase AddTradeUseCase
@inject UserManager<User> UserManager
<style>
    .estimated-text {
        font-size: 12px;
        color: #666;
        margin-top: 4px;
    }
</style>
<ToastComponent @ref="toastComponent" Timeout="3000" />
<EditForm Model="sellTradeModel" OnValidSubmit="PlaceSellTrade">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form">
        <div class="css-1azirga">
            <label>Type:</label>
            <div class="select_wrapper">
                <select name="type" id="type_select" @onchange="HandleTypeChange">
                    <option value="Crypto">Crypto</option>
                    <option value="Stocks">Stocks</option>
                    <option value="Forex">Forex</option>
                </select>
                <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" fill-rule="evenodd">
                        <g transform="translate(-1391 -130)" fill="currentColor">
                            <g transform="translate(1250 116)">
                                <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                            </g>
                        </g>
                    </g>
                </svg>
            </div>
            <ValidationMessage For="@(() => sellTradeModel.OrderType)" class="text-danger small fw-light" />
        </div>
        <div class="form">
            <div class="amount_with_dropdown">
                <div class=" css-v6puf8">
                    <label>Amount:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="sellTradeModel.Quantity" placeholder="100" />
                        <div class="amount_select sell" @onclick="ToggleCoinsAndBalanceDropdown">
                            <span class="icon_divider">
                                <img src="./asseticons/@(selectedAsset).png" alt="">
                                <p>@selectedAsset</p>
                            </span>
                            <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                                <g fill="none" fill-rule="evenodd">
                                    <g transform="translate(-1391 -130)" fill="currentColor">
                                        <g transform="translate(1250 116)">
                                            <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                        </g>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => sellTradeModel.Quantity)" class="text-danger small fw-light" />
                    <small class="text-danger small fw-light">@otherError</small>
                    <CoinsAndBalanceDropdownComponent @bind-IsOpen="isCoinsAndBalanceDropdownOpen" @bind-SelectedType="selectedType" OnSelect="HandleAssetSelection" @rendermode="InteractiveServer" elementId="@("selldd")" />
                    <div class="captions">
                        <span class="caption">
                            <p>Current @sellTradeModel.Symbol2 balance:</p>
                            <p class="value">@FormatValues.FormatCurrencyWithMinusForBal(mainBalance) @selectedAsset</p>
                        </span>
                        <span class="caption">
                            <p>Current @selectedAsset price</p>
                            @if (selectedType == "Crypto" && price is not null && price.ContainsKey(selectedAsset))
                            {
                                selectPrice = price[selectedAsset];
                                <p class="value" style="color: rgb(91, 222, 76);">@price[selectedAsset].ToString("C")</p>
                            }
                            else if (selectedType == "Stocks" && stockprices is not null && stockprices.ContainsKey(selectedAsset))
                            {
                                selectPrice = stockprices[selectedAsset];
                                <p class="value" style="color: rgb(91, 222, 76);">@stockprices[selectedAsset].ToString("C")</p>
                            }
                            else if (selectedType == "Forex" && otherprices is not null && otherprices.ContainsKey(selectedAsset))
                            {
                                selectPrice = otherprices[selectedAsset];
                                <p class="value" style="color: rgb(91, 222, 76);">@otherprices[selectedAsset].ToString("C")</p>
                            }
                        </span>
                    </div>
                </div>
            </div>
            <div class="sl_tp_wrapper">
                <div class="css-v6puf8">
                    <label>Stop Loss:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="sellTradeModel.StopLoss"
                                     @oninput="(e) => HandleStopLossChange(e)"
                                     class="no-zoom-14px"
                                     placeholder="1.500" />
                        <div class="amount_select">
                            <p>@selectedAsset</p>
                        </div>
                    </div>
                    @if (sellTradeModel.StopLoss != 0)
                    {
                        <div class="estimated-text">
                            <span>Estimated Loss: @(FormatValues.FormatCurrencyWithMinus(CalculateEstimatedLoss(sellTradeModel.StopLoss))) @sellTradeModel.Symbol2</span>
                        </div>
                    }
                </div>
                <div class="css-v6puf8">
                    <label>Take Profit:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="sellTradeModel.TakeProfit"
                                     @oninput="(e) => HandleTakeProfitChange(e)"
                                     class="no-zoom-14px"
                                     placeholder="1.500" />
                        <div class="amount_select">
                            <p>@selectedAsset</p>
                        </div>
                    </div>
                    @if (sellTradeModel.TakeProfit != 0)
                    {
                        <div class="estimated-text">
                            <span> Estimated profit: @(FormatValues.FormatCurrencyWithMinus(CalculateEstimatedProfit(sellTradeModel.TakeProfit))) @sellTradeModel.Symbol2</span>
                        </div>
                    }
                </div>
            </div>
            <div class="css-86fwon">
                <label>Leverage:</label>
                <div class="leverage_buttons">
                    <div class="css-y41jdg">
                        <div class="input_wrapper" style="overflow: hidden;">
                            <InputNumber @bind-Value="sellTradeModel.Leverage" class="no-zoom-14px" placeholder="5" style="transform: scale(0.98); font-weight: 500; opacity: 0; z-index: 99;" />
                            <input inputmode="decimal" rows="2" type="text" value="@(leverage)x" style="text-align: start; position: absolute; left: 0px; top: 0px; user-select: none; pointer-events: none; padding-left: 3px; height: 100%;">
                        </div>
                    </div>
                    <button type="button" class="css-40mlel" @onclick="@(() => leverage = 50)">50x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 250)">250x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 500)">500x</button>
                    <ValidationMessage For="@(() => sellTradeModel.Leverage)" class="text-danger small fw-light" />
                </div>
                <RangeInput TValue="int" @bind-Value="leverage" Min="5" Max="500" class="custom-range" />
            </div>
            <div class="css-1azirga">
                <label>Duration:</label>
                <div class="select_wrapper">
                    <InputSelect @bind-Value="sellTradeModel.Duration">
                        <option value="2">2 minutes</option>
                        <option value="5">5 minutes</option>
                        <option value="10">10 minutes</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="120">2 hours</option>
                        <option value="240">4 hours</option>
                        <option value="360">6 hours</option>
                        <option value="480">8 hours</option>
                        <option value="600">10 hours</option>
                        <option value="1200">20 hours</option>
                        <option value="1440">1 day</option>
                        <option value="2880">2 days</option>
                        <option value="4320">3 days</option>
                        <option value="5760">4 days</option>
                        <option value="7200">5 days</option>
                        <option value="8640">6 days</option>
                        <option value="10080">1 weeks</option>
                        <option value="20160">2 weeks</option>
                    </InputSelect>
                    <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <g transform="translate(-1391 -130)" fill="currentColor">
                                <g transform="translate(1250 116)">
                                    <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
                <ValidationMessage For="@(() => sellTradeModel.Duration)" class="text-danger small fw-light" />
            </div>
        </div>
        <div class="divider_24px" aria-hidden="true"></div>
        <button class="css-nncgg" type="submit">
            <p> Sell</p>
        </button>
    </div>
</EditForm>
<Preload LoadingText="Loading..." />
@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    public User? user { get; set; }

    private int leverage
    {
        get => sellTradeModel.Leverage;
        set
        {
            sellTradeModel.Leverage = value;
        }
    }

    private string selectedAsset = "BTC";

    private decimal selectedAssetBalance = 0.0m;

    private decimal mainBalance = 0.0m;

    private string selectedType = "Crypto";

    private decimal selectPrice = 0.0m;

    private bool isCoinsAndBalanceDropdownOpen = false;

    private TradeModel sellTradeModel = new TradeModel();

    private Dictionary<string, decimal>? price;

    private ForexPrice forexPrice;
    private Dictionary<string, decimal>? otherprices;

    private StockPrice stockPrice;
    private Dictionary<string, decimal>? stockprices;

    private string otherError = string.Empty;

    private string AlertMessage = string.Empty;

    private ToastComponent? toastComponent;

    IDisposable _subscription;

    private (decimal ProfitLossDollar, decimal ProfitLossPercent) EstLoss;

    private (decimal ProfitLossDollar, decimal ProfitLossPercent) EstProfit;

    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "Crypto";
        sellTradeModel.OrderType = selectedType;
        selectedAsset = selectedType switch
        {
            "Crypto" => "BTC",
            "Stocks" => "AAPL",
            "Forex" => "USD",
            _ => "BTC"
        };
        sellTradeModel.Symbol1 = selectedType switch
        {
            "Crypto" => "BTC",
            "Stocks" => "AAPL",
            "Forex" => "USD",
            _ => "BTC"
        };
    }


    protected override async Task OnInitializedAsync()
    {
        sellTradeModel.Side = "Sell";
        price = PriceService.Prices;
        PriceService.OnPriceUpdated += HandlePriceUpdate;

        forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        otherprices = forexPrice.Prices;

        stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        stockprices = stockPrice.Prices;

        _subscription = userState.CurrentUserObservable
            .Subscribe(Cuser =>
            {
                user = Cuser;
                mainBalance = user?.Balances
                    .FirstOrDefault(b => b.Asset.AssetSymbol == sellTradeModel.Symbol2)?.Available ?? 0.0m;
                StateHasChanged();
            });
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }

    private void HandlePriceUpdate(Dictionary<string, decimal> newPrice)
    {
        price = newPrice;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PriceService.OnPriceUpdated -= HandlePriceUpdate;
    }

    private void ToggleCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = !isCoinsAndBalanceDropdownOpen;
    }

    private void HandleAssetSelection(string symbol)
    {
        // Handle selected asset symbol
        selectedAsset = symbol;
        sellTradeModel.Symbol2 = symbol;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClickSell", DotNetObjectReference.Create(this), "selldd");
        }
    }

    [JSInvokable]
    public void CloseCoinsAndBalanceDropdownSell()
    {
        isCoinsAndBalanceDropdownOpen = false;
        StateHasChanged();
    }

    private async Task PlaceSellTrade()
    {
        PreloadService.Show(SpinnerColor.Light, "Placing Trade...");
        if (CheckBalance())
        {
            // Implement trade placement logic here
            Trade trade = new Trade()
                {
                    UserID = user.UserID,
                    Duration = sellTradeModel.Duration.ToString(),
                    Symbol1 = sellTradeModel.Symbol1,
                    Symbol2 = sellTradeModel.Symbol2,
                    Side = sellTradeModel.Side,
                    Price = selectPrice,
                    Quantity = sellTradeModel.Quantity,
                    StopLoss = sellTradeModel.StopLoss,
                    TakeProfit = sellTradeModel.TakeProfit,
                    Fee = 0.0m,
                    Status = "Running",
                    State = "Live",
                    OrderType = sellTradeModel.OrderType,
                    Leverage = sellTradeModel.Leverage.ToString()
                };
            var status = await AddTradeUseCase.Execute(trade.UserID, trade);
            if (status == null)
            {
                otherError = "Trade placement failed";
                return;
            }
            else if (status == "0")
            {
                AlertMessage = "Insufficient USD balance!";
                toastComponent?.ShowToast(MyToastType.Danger, "Trade", AlertMessage);
            }
            else if (status == "1")
            {
                // Reset the form after placing the trade
                sellTradeModel = new TradeModel();
                AlertMessage = "Trade Placed Successfully!";
                toastComponent?.ShowToast(MyToastType.Success, "Trade", AlertMessage);
                user = await UserManager.FindByNameAsync(user.Email);
                userState.SetCurrentUser(user);
            }
            else if (status == "2")
            {
                AlertMessage = "ASSET NOT FOUND!";
                toastComponent?.ShowToast(MyToastType.Danger, "Trade", AlertMessage);
            }
            else if (status == "3")
            {
                AlertMessage = "USER NOT FOUND!";
                toastComponent?.ShowToast(MyToastType.Danger, "Trade", AlertMessage);
            }
        }
        else
        {
            otherError = $"Insufficient {sellTradeModel.Symbol1} balance";
        }
        PreloadService.Hide();
    }

    private bool CheckBalance()
    {
        var userBalance = user?.Balances?.FirstOrDefault(b => b.Asset.AssetSymbol == sellTradeModel.Symbol2);

        if (userBalance == null)
        {
            return false; // User balance not found
        }
        else if (sellTradeModel.Quantity > userBalance.Available)
        {
            return false; // Insufficient balance
        }
        return true; // Sufficient balance
    }

    private void HandleStopLossChange(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal value))
        {
            sellTradeModel.StopLoss = value;
            StateHasChanged();
        }
    }

    private void HandleTakeProfitChange(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal value))
        {
            sellTradeModel.TakeProfit = value;
            StateHasChanged();
        }
    }

    private decimal CalculateEstimatedLoss(decimal stopLossValue)
    {
        // Implement your actual calculation logic here
        EstLoss = FormatValues.CalculateProfitLoss(
            selectPrice,
            stopLossValue,
            sellTradeModel.Quantity,
            Convert.ToDecimal(sellTradeModel.Leverage),
            sellTradeModel.Side == "Buy" ? true : false
        );
        return EstLoss.ProfitLossDollar;
    }

    private decimal CalculateEstimatedProfit(decimal takeProfitValue)
    {
        // Implement your actual calculation logic here
        EstProfit = FormatValues.CalculateProfitLoss(
            selectPrice,
            takeProfitValue,
            sellTradeModel.Quantity,
            Convert.ToDecimal(sellTradeModel.Leverage),
            sellTradeModel.Side == "Buy" ? true : false
        );
        return EstProfit.ProfitLossDollar;
    }

}