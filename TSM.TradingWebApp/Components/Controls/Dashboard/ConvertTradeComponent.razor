@rendermode InteractiveServer
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject IJSRuntime JS
<div class="form">
    <div class="form">
        <div class="amount_with_dropdown">
            <div class=" css-v6puf8">
                <label>From:</label>
                <div class="amountbox_wrapper">
                    <input type="number" placeholder="0.03" value="@FromAmount" @oninput="HandleFromAmountChange" class="no-zoom-14px">
                    <div class="amount_select from" @onclick="ToggleCoinsAndBalanceDropdown">
                        <span class="icon_divider">
                            <img src="./asseticons/@(selectedAssetFrom).png" alt="">
                            <p>@selectedAssetFrom</p>
                        </span>
                        <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                            <g fill="none" fill-rule="evenodd">
                                <g transform="translate(-1391 -130)" fill="currentColor">
                                    <g transform="translate(1250 116)">
                                        <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </div>
                </div>
                <CoinsAndBalanceDropdownComponent @bind-IsOpen="isCoinsAndBalanceDropdownOpen" @bind-SelectedType="selectedType" OnSelect="HandleAssetSelection" user="user" @rendermode="InteractiveServer" elementId="@("convertddfrom")" />
                <div class="buttons" style="display: flex; gap: 4px; justify-content: space-between; width: 100%; height: 34px; margin: 8px 0px 16px;">
                    <button class=" css-40mlel" type="button" @onclick="@(()=>CalculatePercentage(10))">10%</button>
                    <button class=" css-40mlel" type="button" @onclick="@(()=>CalculatePercentage(25))">25%</button>
                    <button class=" css-40mlel" type="button" @onclick="@(()=>CalculatePercentage(50))">50%</button>
                    <button class=" css-40mlel" type="button" @onclick="@(()=>CalculatePercentage(75))">75%</button>
                    <button class=" css-40mlel" type="button" @onclick="@(()=>CalculatePercentage(100))">MAX</button>
                </div>
                <div class="captions">
                    <span class="caption">
                        <p>Current @selectedAssetFrom balance:</p>
                        <p class="value">@FromBalance @selectedAssetFrom</p>
                    </span>
                    <span class="caption">
                        <p>Current @selectedAssetFrom price</p>
                        @if (price is not null && price.ContainsKey(selectedAssetFrom))
                        {
                            FromPrice = price[selectedAssetFrom];
                            <p class="value" style="color: rgb(91, 222, 76);">@price[selectedAssetFrom].ToString("C")</p>
                        }
                        else if (stockprices is not null && stockprices.ContainsKey(selectedAssetFrom))
                        {
                            FromPrice = stockprices[selectedAssetFrom];
                            <p class="value" style="color: rgb(91, 222, 76);">@stockprices[selectedAssetFrom].ToString("C")</p>
                        }
                        else if (otherprices is not null && otherprices.ContainsKey(selectedAssetFrom))
                        {
                            FromPrice = otherprices[selectedAssetFrom];
                            <p class="value" style="color: rgb(91, 222, 76);">@otherprices[selectedAssetFrom].ToString("C")</p>
                        }
                    </span>
                </div>
            </div>
        </div>
        <div class="amount_with_dropdown">
            <div class=" css-v6puf8">
                <label>To:</label>
                <div class="amountbox_wrapper">
                    <input type="number" placeholder="0.0000" disabled="" class="no-zoom-14px" @bind-value="ToAmount">
                    <div class="amount_select to" @onclick="ToggleCoinsAndBalanceDropdown2">
                        <span class="icon_divider">
                            <img src="./asseticons/@(selectedAssetTo).png" alt="">
                            <p>@selectedAssetTo</p>
                        </span>
                        <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                            <g fill="none" fill-rule="evenodd">
                                <g transform="translate(-1391 -130)" fill="currentColor">
                                    <g transform="translate(1250 116)">
                                        <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </div>
                </div>
                <CoinsAndBalanceDropdownComponent @bind-IsOpen="isCoinsAndBalanceDropdownOpen2" @bind-SelectedType="selectedType" OnSelect="HandleAssetSelection2" user="user" @rendermode="InteractiveServer" elementId="@("convertddto")" />
                <div class="captions">
                    <span class="caption">
                        <p>Current @selectedAssetTo balance:</p>
                        <p class="value">@ToBalance @selectedAssetTo</p>
                    </span>
                    <span class="caption">
                        <p>Current @selectedAssetTo price</p>
                        @if (price is not null && price.ContainsKey(selectedAssetTo))
                        {
                            ToPrice = price[selectedAssetTo];
                            <p class="value" style="color: rgb(91, 222, 76);">@price[selectedAssetTo].ToString("C")</p>
                        }
                        else if (stockprices is not null && stockprices.ContainsKey(selectedAssetTo))
                        {
                            ToPrice = stockprices[selectedAssetTo];
                            <p class="value" style="color: rgb(91, 222, 76);">@stockprices[selectedAssetTo].ToString("C")</p>
                        }
                        else if (otherprices is not null && otherprices.ContainsKey(selectedAssetTo))
                        {
                            ToPrice = otherprices[selectedAssetTo];
                            <p class="value" style="color: rgb(91, 222, 76);">@otherprices[selectedAssetTo].ToString("C")</p>
                        }
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="divider_24px" aria-hidden="true"></div>
    <button class="disabled css-nncgg" disabled="">
        <p> Convert</p>
    </button>
</div>
@code{
    [Parameter]
    public User? user { get; set; }

    private string selectedAssetFrom = "USD";
    private decimal FromBalance = 0.0m;
    private decimal FromAmount = 0.0m;
    private decimal FromPrice = 0.0m;
    private string selectedAssetTo = "BTC";
    private decimal ToBalance = 0.0m;
    private decimal ToAmount = 0.0m;
    private decimal ToPrice = 0.0m;

    private string selectedType = "All";

    private bool isCoinsAndBalanceDropdownOpen = false;
    private bool isCoinsAndBalanceDropdownOpen2 = false;

    private Dictionary<string, decimal>? price;

    private ForexPrice forexPrice;
    private Dictionary<string, decimal>? otherprices;

    private StockPrice stockPrice;
    private Dictionary<string, decimal>? stockprices;

    private void CalculatePercentage(int percentage){
        FromAmount = FromBalance * percentage / 100;
        decimal convertedUSD = FromAmount * FromPrice;
        ToAmount = convertedUSD / ToPrice;
    }

    private void HandleFromAmountChange(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out decimal value))
        {
            FromAmount = value;
            decimal convertedUSD = FromAmount * FromPrice;
            ToAmount = convertedUSD / ToPrice;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        FromBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == selectedAssetFrom)?.Available ?? 0.0m;
        ToBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == selectedAssetTo)?.Available ?? 0.0m;
    }

    protected override async Task OnInitializedAsync()
    {

        price = PriceService.Prices;
        PriceService.OnPriceUpdated += HandlePriceUpdate;

        forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        otherprices = forexPrice.Prices;

        stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        stockprices = stockPrice.Prices;
    }

    private void HandlePriceUpdate(Dictionary<string, decimal> newPrice)
    {
        price = newPrice;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PriceService.OnPriceUpdated -= HandlePriceUpdate;
    }

    private void HandleAssetSelection(string symbol)
    {
        // Handle selected asset symbol
        selectedAssetFrom = symbol;
        FromBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == selectedAssetFrom)?.Available ?? 0.0m;
    }

    private void HandleAssetSelection2(string symbol)
    {
        // Handle selected asset symbol
        selectedAssetTo = symbol;
        ToBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == selectedAssetTo)?.Available ?? 0.0m;
    }

    private void ToggleCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = !isCoinsAndBalanceDropdownOpen;
    }
    private void ToggleCoinsAndBalanceDropdown2()
    {
        isCoinsAndBalanceDropdownOpen2 = !isCoinsAndBalanceDropdownOpen2;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JS.InvokeVoidAsync("registerOutsideClickConvertFrom", DotNetObjectReference.Create(this), "convertddfrom");
            //await JS.InvokeVoidAsync("registerOutsideClickConvertTo", DotNetObjectReference.Create(this), "convertddto");
          }
    }

    [JSInvokable]
    public void CloseCoinsAndBalanceDropdownFrom()
    {
        isCoinsAndBalanceDropdownOpen = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void CloseCoinsAndBalanceDropdownTo()
    {
        isCoinsAndBalanceDropdownOpen2 = false;
        StateHasChanged();
    }
}