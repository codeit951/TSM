@rendermode InteractiveServer
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject IJSRuntime JS
@inject DynamicStateContainer State

<EditForm Model="tradeModel" OnValidSubmit="PlaceTrade">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form">
        <div class="css-1azirga">
            <label>Type:</label>
            <div class="select_wrapper">
                <select name="type" id="type_select" @onchange="HandleTypeChange">
                    <option value="Crypto">Crypto</option>
                    <option value="Stocks">Stocks</option>
                    <option value="Forex">Forex</option>
                </select>
                <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" fill-rule="evenodd">
                        <g transform="translate(-1391 -130)" fill="currentColor">
                            <g transform="translate(1250 116)">
                                <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                            </g>
                        </g>
                    </g>
                </svg>
            </div>
            <ValidationMessage For="@(() => tradeModel.OrderType)" class="text-danger small fw-light" />

        </div>
        <div class="form">
            <div class="amount_with_dropdown">
                <div class=" css-v6puf8">
                    <label>Amount:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="tradeModel.Quantity" placeholder="100" />
                        <div class="amount_select buy" @onclick="ToggleCoinsAndBalanceDropdown">
                            <span class="icon_divider">
                                <img src="./asseticons/@(selectedAsset).png" alt="">
                                <p>@selectedAsset</p>
                            </span>
                            <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                                <g fill="none" fill-rule="evenodd">
                                    <g transform="translate(-1391 -130)" fill="currentColor">
                                        <g transform="translate(1250 116)">
                                            <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                        </g>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => tradeModel.Quantity)" class="text-danger small fw-light" />
                    <small class="text-danger small fw-light">@otherError</small>
                    <CoinsAndBalanceDropdownComponent @bind-IsOpen="isCoinsAndBalanceDropdownOpen" @bind-SelectedType="selectedType" OnSelect="HandleAssetSelection" user="user" @rendermode="InteractiveServer" elementId="@("buydd")" />
                    <div class="captions">
                        <span class="caption">
                            <p>Current USD balance:</p>
                            <p class="value">@mainBalance.ToString("C") USD</p>
                        </span>
                        <span class="caption">
                            <p>Current @selectedAsset price</p>
                            @if (selectedType == "Crypto"&& price is not null && price.ContainsKey(selectedAsset))
                            {
                                <p class="value" style="color: rgb(91, 222, 76);">@price[selectedAsset].ToString("C")</p>
                            }
                            else if (selectedType == "Stocks" && stockprices is not null && stockprices.ContainsKey(selectedAsset))
                            {
                                <p class="value" style="color: rgb(91, 222, 76);">@stockprices[selectedAsset].ToString("C")</p>
                            }
                            else if (selectedType == "Forex" && otherprices is not null && otherprices.ContainsKey(selectedAsset))
                            {
                                <p class="value" style="color: rgb(91, 222, 76);">@otherprices[selectedAsset].ToString("C")</p>
                            }
                        </span>
                    </div>
                </div>
            </div>
            <div class="sl_tp_wrapper">
                <div class="css-v6puf8">
                    <label>Stop Loss:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="tradeModel.StopLoss" class="no-zoom-14px" placeholder="-1.500" />
                        <div class="amount_select">
                            <p>@selectedAsset</p>
                        </div>
                    </div>
                </div>
                <div class="css-v6puf8">
                    <label>Take Profit:</label>
                    <div class="amountbox_wrapper">
                        <InputNumber @bind-Value="tradeModel.TakeProfit" class="no-zoom-14px" placeholder="1.500" />
                        <div class="amount_select">
                            <p>@selectedAsset</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="css-86fwon">
                <label>Leverage:</label>
                <div class="leverage_buttons">
                    <div class="css-y41jdg">
                        <div class="input_wrapper" style="overflow: hidden;">
                            <InputNumber @bind-Value="tradeModel.Leverage" class="no-zoom-14px" placeholder="5" style="transform: scale(0.98); font-weight: 500; opacity: 0; z-index: 99;" />
                            <input inputmode="decimal" rows="2" type="text" value="@(leverage)x" style="text-align: start; position: absolute; left: 0px; top: 0px; user-select: none; pointer-events: none; padding-left: 3px; height: 100%;"></div>
                    </div>
                    <button type="button" class="css-40mlel" @onclick="@(() => leverage = 50)">50x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 250)">250x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 500)">500x</button>
                    <ValidationMessage For="@(() => tradeModel.Leverage)" class="text-danger small fw-light" />
                </div>
                <RangeInput TValue="int" Step="5" @bind-Value="leverage" Min="0" Max="500" class="custom-range" />
            </div>
            <div class="css-1azirga">
                <label>Duration:</label>
                <div class="select_wrapper">
                    <InputSelect @bind-Value="tradeModel.Duration">
                        <option value="2">2 minutes</option>
                        <option value="5">5 minutes</option>
                        <option value="10">10 minutes</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="120">2 hours</option>
                        <option value="240">4 hours</option>
                        <option value="360">6 hours</option>
                        <option value="480">8 hours</option>
                        <option value="600">10 hours</option>
                        <option value="1200">20 hours</option>
                        <option value="1440">1 day</option>
                        <option value="2880">2 days</option>
                        <option value="4320">3 days</option>
                        <option value="5760">4 days</option>
                        <option value="7200">5 days</option>
                        <option value="8640">6 days</option>
                        <option value="10080">1 weeks</option>
                        <option value="20160">2 weeks</option>
                    </InputSelect>
                    <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <g transform="translate(-1391 -130)" fill="currentColor">
                                <g transform="translate(1250 116)">
                                    <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
                <ValidationMessage For="@(() => tradeModel.Duration)" class="text-danger small fw-light" />
            </div>
        </div>
        <div class="divider_24px" aria-hidden="true"></div>
        <button class=" css-nncgg" type="submit">
            <p> Buy</p>
        </button>
    </div>
</EditForm>
@code {
    [Parameter]
    public User? user { get; set; }


    private int leverage
    {
        get => tradeModel.Leverage;
        set
        {
            tradeModel.Leverage = value;
        }
    }

    private string selectedAsset = "BTC";

    private decimal selectedAssetBalance = 0.0m;

    private decimal mainBalance = 0.0m;

    private string selectedType = "Crypto";

    private bool isCoinsAndBalanceDropdownOpen = false;

    private TradeModel tradeModel = new TradeModel();

    private Dictionary<string, decimal>? price;

    private ForexPrice forexPrice;
    private Dictionary<string, decimal>? otherprices;

    private StockPrice stockPrice;
    private Dictionary<string, decimal>? stockprices;

    private string otherError = string.Empty;


    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "Crypto";
        tradeModel.OrderType = selectedType;
        selectedAsset = selectedType switch
        {
            "Crypto" => "BTC",
            "Stocks" => "AAPL",
            "Forex" => "USD",
            _ => "BTC"
        };
        tradeModel.Symbol1 = selectedType switch
        {
            "Crypto" => "BTC",
            "Stocks" => "AAPL",
            "Forex" => "USD",
            _ => "BTC"
        };
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        mainBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == "USD")?.Available ?? 0.0m;
    }

    protected override async Task OnInitializedAsync()
    {
        State.SetValue("TradingView", "BITGET:BTCUSDT");

        price = PriceService.Prices;
        PriceService.OnPriceUpdated += HandlePriceUpdate;

        forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        otherprices = forexPrice.Prices;

        stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        stockprices = stockPrice.Prices;
    }

    private void HandlePriceUpdate(Dictionary<string, decimal> newPrice)
    {
        price = newPrice;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PriceService.OnPriceUpdated -= HandlePriceUpdate;
    }

    private void ToggleCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = !isCoinsAndBalanceDropdownOpen;
    }

    private void HandleAssetSelection(string symbol)
    {
        // Handle selected asset symbol
        selectedAsset = symbol;
        tradeModel.Symbol1 = symbol;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClick2", DotNetObjectReference.Create(this), "buydd");
        }
    }

    [JSInvokable]
    public void CloseCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = false;
        StateHasChanged();
    }

    private async Task PlaceTrade()
    {
        if (CheckBalance())
        {
            // Implement trade placement logic here
            // You can access the tradeModel properties to get the values entered by the user
            // For example: tradeModel.OrderType, tradeModel.Amount, etc.
            // Example: Displaying the trade model values in a console log
            Console.WriteLine($"Order Type: {tradeModel.OrderType}");
            Console.WriteLine($"Amount: {tradeModel.Quantity}");
            Console.WriteLine($"Selected Asset: {selectedAsset}");
            Console.WriteLine($"Leverage: {tradeModel.Leverage}");
            Console.WriteLine($"Symbol: {tradeModel.Symbol1}");
            // Reset the form after placing the trade
            tradeModel = new TradeModel();
        }
        else
        {
            otherError = "Insufficient USD balance";
        }
    }

    private bool CheckBalance()
    {
        var userBalance = user?.Balances?.FirstOrDefault(b => b.Asset.AssetSymbol == selectedAsset);

        if (userBalance == null)
        {
            return false; // User balance not found
        }
        else if (tradeModel.Quantity > userBalance.Available)
        {
            return false; // Insufficient balance
        }
        return true; // Sufficient balance
    }
}