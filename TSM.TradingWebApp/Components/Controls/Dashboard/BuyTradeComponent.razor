@rendermode InteractiveServer
@inject CryptoPriceService PriceService
@inject IViewAssetsByTypeUseCase ViewAssetsByType
@inject IJSRuntime JS
@inject DynamicStateContainer State
<div class="form">
    <div class="css-1azirga">
        <label>Type:</label>
        <div class="select_wrapper">
            <select name="type" id="type_select" @onchange="HandleTypeChange">
                <option value="Crypto">Crypto</option>
                <option value="Stocks">Stocks</option>
                <option value="Forex">Forex</option>
            </select>
            <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                <g fill="none" fill-rule="evenodd">
                    <g transform="translate(-1391 -130)" fill="currentColor">
                        <g transform="translate(1250 116)">
                            <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                        </g>
                    </g>
                </g>
            </svg>
        </div>
    </div>
    <div class="form">
        <div class="amount_with_dropdown">
            <div class=" css-v6puf8">
                <label>Amount:</label>
                <div class="amountbox_wrapper">
                    <input type="number" placeholder="100">
                    <div class="amount_select buy" @onclick="ToggleCoinsAndBalanceDropdown">
                        <span class="icon_divider">
                            <img src="./asseticons/@(selectedAsset).png" alt="">
                            <p>@selectedAsset</p>
                        </span>
                        <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                            <g fill="none" fill-rule="evenodd">
                                <g transform="translate(-1391 -130)" fill="currentColor">
                                    <g transform="translate(1250 116)">
                                        <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </div>
                </div>
                <CoinsAndBalanceDropdownComponent @bind-IsOpen="isCoinsAndBalanceDropdownOpen" @bind-SelectedType="selectedType" OnSelect="HandleAssetSelection" user="user" @rendermode="InteractiveServer" elementId="@("buydd")" />
                <div class="captions">
                    <span class="caption">
                        <p>Current USD balance:</p>
                        <p class="value">@mainBalance.ToString("C") USD</p>
                    </span>
                    <span class="caption">
                        <p>Current @selectedAsset price</p>
                        @if (selectedType == "Crypto"&& price is not null && price.ContainsKey(selectedAsset))
                        {
                            <p class="value" style="color: rgb(91, 222, 76);">@price[selectedAsset].ToString("C")</p>
                        }
                        else if (selectedType == "Stocks" && stockprices is not null && stockprices.ContainsKey(selectedAsset))
                        {
                        <p class="value" style="color: rgb(91, 222, 76);">@stockprices[selectedAsset].ToString("C")</p>
                        }
                        else if (selectedType == "Forex" && otherprices is not null && otherprices.ContainsKey(selectedAsset))
                        {
                        <p class="value" style="color: rgb(91, 222, 76);">@otherprices[selectedAsset].ToString("C")</p>
                        }
                    </span>
                </div>
            </div>
        </div>
        <div class="sl_tp_wrapper">
            <div class="css-v6puf8">
                <label>Stop Loss:</label>
                <div class="amountbox_wrapper">
                    <input type="number" placeholder="-1.500" class="no-zoom-14px">
                    <div class="amount_select">
                        <p>@selectedAsset</p>
                    </div>
                </div>
            </div>
            <div class="css-v6puf8">
                <label>Take Profit:</label>
                <div class="amountbox_wrapper">
                    <input type="number" placeholder="1.500" class="no-zoom-14px">
                    <div class="amount_select">
                        <p>@selectedAsset</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="css-86fwon">
            <label>Leverage:</label>
            <div class="leverage_buttons">
                <div class="css-y41jdg">
                    <div class="input_wrapper" style="overflow: hidden;"><input type="number" placeholder="100" class="no-zoom-14px" value="5" style="transform: scale(0.98); font-weight: 500; opacity: 0; z-index: 99;"><input inputmode="decimal" rows="2" type="text" value="@(leverage)x" style="text-align: start; position: absolute; left: 0px; top: 0px; user-select: none; pointer-events: none; padding-left: 3px; height: 100%;"></div>
                </div>
                <button type="button" class="css-40mlel" @onclick="@(() => leverage = 50)">50x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 250)">250x</button><button type="button" class="css-40mlel" @onclick="@(() => leverage = 500)">500x</button>
            </div>
            <RangeInput TValue="int" @bind-Value="leverage" Min="0" Max="500" class="custom-range" />
        </div>
        <div class="css-1azirga">
            <label>Duration:</label>
            <div class="select_wrapper">
                <select name="duration">
                    <option value="2 minutes">2 minutes</option>
                    <option value="5 minutes">5 minutes</option>
                    <option value="10 minutes">10 minutes</option>
                    <option value="30 minutes">30 minutes</option>
                    <option value="1 hour">1 hour</option>
                    <option value="2 hours">2 hours</option>
                    <option value="4 hours">4 hours</option>
                    <option value="6 hours">6 hours</option>
                    <option value="8 hours">8 hours</option>
                    <option value="10 hours">10 hours</option>
                    <option value="20 hours">20 hours</option>
                    <option value="1 day">1 day</option>
                    <option value="2 days">2 days</option>
                    <option value="3 days">3 days</option>
                    <option value="4 days">4 days</option>
                    <option value="5 days">5 days</option>
                    <option value="6 days">6 days</option>
                    <option value="1 weeks">1 weeks</option>
                    <option value="2 weeks">2 weeks</option>
                </select>
                <svg class="svg_icon" viewBox="0 0 8 6" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" fill-rule="evenodd">
                        <g transform="translate(-1391 -130)" fill="currentColor">
                            <g transform="translate(1250 116)">
                                <path transform="translate(145 17) rotate(180) translate(-145 -17)" d="m145.77 14.922 2.865 3.438c0.35356 0.42428 0.29624 1.0548-0.12804 1.4084-0.17972 0.14976-0.40625 0.23178-0.64018 0.23178h-5.7299c-0.55228 0-1-0.44772-1-1 0-0.23394 0.082016-0.46047 0.23178-0.64018l2.865-3.438c0.35356-0.42428 0.98413-0.4816 1.4084-0.12804 0.046463 0.038719 0.089318 0.081574 0.12804 0.12804z"></path>
                            </g>
                        </g>
                    </g>
                </svg>
            </div>
        </div>
    </div>
    <div class="divider_24px" aria-hidden="true"></div>
    <button class="disabled css-nncgg" disabled="">
        <p> Buy</p>
    </button>
</div>
@code {
    [Parameter]
    public User? user { get; set; }


    int leverage = 5;

    private string selectedAsset = "BTC";

    private decimal selectedAssetBalance = 0.0m;

    private decimal mainBalance = 0.0m;

    private string selectedType = "Crypto";

    private bool isCoinsAndBalanceDropdownOpen = false;

    private Dictionary<string, decimal>? price;

    private ForexPrice forexPrice;
    private Dictionary<string, decimal>? otherprices;

    private StockPrice stockPrice;
    private Dictionary<string, decimal>? stockprices;


    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "Crypto";
        selectedAsset = selectedType switch
        {
            "Crypto" => "BTC",
            "Stocks" => "AAPL",
            "Forex" => "USD",
            _ => "BTC"
        };
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        mainBalance = user?.Balances
            .FirstOrDefault(b => b.Asset.AssetSymbol == "USD")?.Available ?? 0.0m;
    }

    protected override async Task OnInitializedAsync()
    {
        State.SetValue("TradingView", "BITGET:BTCUSDT");

        price = PriceService.Prices;
        PriceService.OnPriceUpdated += HandlePriceUpdate;

        forexPrice = new ForexPrice(ViewAssetsByType);
        await forexPrice.FetchPricesAsync();
        otherprices = forexPrice.Prices;

        stockPrice = new StockPrice(ViewAssetsByType);
        await stockPrice.GetStockPrice();
        stockprices = stockPrice.Prices;
    }

    private void HandlePriceUpdate(Dictionary<string, decimal> newPrice)
    {
        price = newPrice;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PriceService.OnPriceUpdated -= HandlePriceUpdate;
    }

    private void ToggleCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = !isCoinsAndBalanceDropdownOpen;
    }

    private void HandleAssetSelection(string symbol)
    {
        // Handle selected asset symbol
        selectedAsset = symbol;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClick2", DotNetObjectReference.Create(this), "buydd");
        }
    }

    [JSInvokable]
    public void CloseCoinsAndBalanceDropdown()
    {
        isCoinsAndBalanceDropdownOpen = false;
        StateHasChanged();
    }
}