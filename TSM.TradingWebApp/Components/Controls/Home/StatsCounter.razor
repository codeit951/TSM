@inject IJSRuntime JS
@rendermode InteractiveServer

<div style="background-color: rgb(5, 8, 11); padding: 12px 0px;">
    <div>
        <div class="mx-auto max-w-[1545px] px-6 lg:px-8 py-24">
            <div class="mx-auto max-w-2xl lg:mx-0 lg:max-w-xl">
                <p class="mt-2 text-3xl font-bold tracking-tight text-white sm:text-4xl">
                    Trusted by thousands of users worldwide
                </p>
            </div>
            <dl id="stats-section" class="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-10 text-white sm:mt-20 sm:grid-cols-2 sm:gap-y-16 lg:mx-0 lg:max-w-none lg:grid-cols-4">
                <div class="flex flex-col gap-y-3 border-l border-white/10 pl-6">
                    <dt class="text-md leading-6">Paid out to traders</dt>
                    <dd class="order-first text-[36px] font-semibold tracking-tight" id="counter1">@(PaidOut.ToString("N0"))M+</dd>
                </div>
                <div class="flex flex-col gap-y-3 border-l border-white/10 pl-6">
                    <dt class="text-md leading-6">Countries registered with us</dt>
                    <dd class="order-first text-[36px] font-semibold tracking-tight" id="counter2">@(Countries)+</dd>
                </div>
                <div class="flex flex-col gap-y-3 border-l border-white/10 pl-6">
                    <dt class="text-md leading-6">Volume of trades monthly</dt>
                    <dd class="order-first text-[36px] font-semibold tracking-tight" id="counter3">@(TradeVolume.ToString("N0"))M+</dd>
                </div>
                <div class="flex flex-col gap-y-3 border-l border-white/10 pl-6">
                    <dt class="text-md leading-6">Avg. payout processing time</dt>
                    <dd class="order-first text-[36px] font-semibold tracking-tight" id="counter4">@(PayoutTime)h</dd>
                </div>
            </dl>
        </div>
    </div>
</div>

@code {
    private int PaidOut = 0;
    private int Countries = 0;
    private int TradeVolume = 0;
    private int PayoutTime = 0;
    private DotNetObjectReference<StatsCounter>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeCounter", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task StartCounting()
    {
        var task1 = CountTo(100, value => PaidOut = value, 2);
        var task2 = CountTo(180, value => Countries = value, 3);
        var task3 = CountTo(13, value => TradeVolume = value, 1);
        var task4 = CountTo(3, value => PayoutTime = value, 1);

        await Task.WhenAll(task1, task2, task3, task4); // Run all counters at the same time
    }

    private async Task CountTo(int target, Action<int> updateValue, int step)
    {
        int current = 0;

        while (current < target)
        {
            current += step;
            if (current > target) current = target;
            updateValue(current);
            StateHasChanged();
            await Task.Delay(30);
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
