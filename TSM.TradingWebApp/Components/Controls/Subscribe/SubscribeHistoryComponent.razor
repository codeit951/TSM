@inject UserManager<User> UserManager
@inject UserState State
@implements IAsyncDisposable
@inject ICloseSMSUseCase CloseSMSUseCase

<ToastComponent @ref="toastComponent" Timeout="3000" />
<div class="css-1jvcf3u" id="subscribehistory" style="transform: translateX(@Transform);opacity:1;">
    <div class="subscribe_history_top">
        <div role="button" style="white-space: nowrap; min-width: 100px; display: grid; grid-template-columns: 16px auto; align-items: center; gap: 6px; appearance: button; cursor: pointer;">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left">
                <path d="m15 18-6-6 6-6"></path>
            </svg>
            <p class="subscribe_history_top_title">Subscription History</p>
        </div>
        <button @onclick="UpdateTransform"><Icon Name="IconName.X" /></button>
    </div>
    <div class="subscribe_history_content">
        <div class="subscribe_content_wrapper scrollbar-hide">
            @if (user is not null)
            {
                var SMSs = user.SMSs.Where(s => s.PlanType == SMSTypes.Subscription).ToList();
                if (SMSs is not null && SMSs.Count() > 0)
                {
                    <ul class="mining-list">
                        @foreach (var sms in SMSs)
                        {
                            if (sms.Status != StatusType.Completed)
                            {
                                <li class="mining-item">
                                    <div class="item-header">
                                        <span class="plan-name">@sms.PlanName</span>
                                        <span class="status @sms.Status">@sms.Status</span>
                                    </div>
                                    <div class="item-details">
                                        <div class="detail-row">
                                            <span class="label">Amount Invested:</span>
                                            <span class="value">@sms.Amount @sms.PlanSymbol</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Duration:</span>
                                            <span class="value">@sms.Duration Days</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Current Balance:</span>
                                            <span class="value">@FormatValues.FormatCurrencyWithMinusForBal(sms.Balance) @sms.PlanSymbol</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">ROI:</span>
                                            <span class="value">@sms.ROI @sms.PlanSymbol</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Start Date:</span>
                                            <span class="value">@sms.StartDate.ToShortDateString()</span>
                                        </div>
                                    </div>
                                    @if (sms.Status == StatusType.Active)
                                    {
                                        <button class="action-btn close-mining-btn" @onclick="()=> ClosePlan(sms)">Close Mining</button>
                                    }
                                </li>
                            }
                            else
                            {
                                <li class="mining-item">
                                    <div class="item-header">
                                        <span class="plan-name">@sms.PlanName</span>
                                        <span class="status completed">@sms.Status</span>
                                    </div>
                                    <div class="item-details">
                                        <div class="detail-row">
                                            <span class="label">Amount Invested:</span>
                                            <span class="value">@sms.Amount @sms.PlanSymbol</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Duration:</span>
                                            <span class="value">@sms.Duration Days</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Final Balance:</span>
                                            <span class="value">@FormatValues.FormatCurrencyWithMinusForBal(sms.Balance) @sms.PlanSymbol</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">Start Date:</span>
                                            <span class="value">@sms.StartDate.ToLongDateString()</span>
                                        </div>
                                        <div class="detail-row">
                                            <span class="label">End Date:</span>
                                            <span class="value">@sms.LastUpdate.ToLongDateString()</span>
                                        </div>
                                    </div>
                                    <button class="action-btn" data-mining-id="mining-3" disabled>Closed</button>
                                </li>
                            }
                        }
                    </ul>
                }
                else
                {
                    <div class="empty_state">
                        <svg class="svg-icon" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12.132 6.06h10" stroke="currentColor" stroke-width="1.2" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M14.352 2.5h5.56c1.78 0 2.22.44 2.22 2.2v4.11c0 1.76-.44 2.2-2.22 2.2h-5.56c-1.78 0-2.22-.44-2.22-2.2V4.7c0-1.76.44-2.2 2.22-2.2Z"
                                  stroke="currentColor"
                                  stroke-width="1.2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"></path>
                            <path d="M2.132 17.56h10" stroke="currentColor" stroke-width="1.2" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M4.352 14h5.56c1.78 0 2.22.44 2.22 2.2v4.11c0 1.76-.44 2.2-2.22 2.2h-5.56c-1.78 0-2.22-.44-2.22-2.2V16.2c0-1.76.44-2.2 2.22-2.2ZM22.132 15.5c0 3.87-3.13 7-7 7l1.05-1.75"
                                  stroke="currentColor"
                                  stroke-width="1.2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"></path>
                            <path d="M7.05 4.1 3.738 7.414M3.732 4.1l3.314 3.314" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"></path>
                        </svg>
                        <p>No subscriptions yet.</p>
                    </div>
                }
            }
            else
            {
                <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                    <Placeholder Width="PlaceholderWidth.Col12" />
                    <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Large" />
                    <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
                    <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.ExtraSmall" />
                </PlaceholderContainer>
            }

        </div>
    </div>
</div>
<Preload LoadingText="Loading..." />
@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter]
    public string Transform { get; set; }

    [Parameter] public EventCallback<string> TransformChanged { get; set; }

    private User? user;

    private IDisposable _subscription;

    private string AlertMessage = string.Empty;

    private ToastComponent? toastComponent;

    protected override async Task OnInitializedAsync()
    {
        _subscription = State.CurrentUserObservable
       .Subscribe(Cuser =>
       {
           user = Cuser;
           StateHasChanged();
       });
    }

    private async Task ClosePlan(SMS sms)
    {
        PreloadService.Show(SpinnerColor.Light, "Ending Plan...");
        var result = await CloseSMSUseCase.ExecuteAsync(sms);
        if (result)
        {
            AlertMessage = "Plan Closed Successfully!";
            toastComponent?.ShowToast(MyToastType.Success, "Subscription", AlertMessage);
            user = await UserManager.FindByNameAsync(user.Email);
            State.SetCurrentUser(user);
        }
        else
        {
            AlertMessage = "Failed to Close Plan!";
            toastComponent?.ShowToast(MyToastType.Danger, "Subscription", AlertMessage);
        }
        PreloadService.Hide();
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }

    private void UpdateTransform()
    {
        Transform = "100%"; // Update locally
        TransformChanged.InvokeAsync(Transform); // Notify Parent
    }
}