@page "/login"
@using TSM.InMemoryStore

@layout Layout.AuthLayout
@inject NavigationManager NavigationManager
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IViewAssetsByNameUseCase ViewAssetsByNameUseCase
@inject IUpdateUserBalanceUseCase UpdateUserBalanceUseCase

<div class="css-1ne255a">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="d-flex justify-content-center">
            <div class="alert alert-danger alert-dismissible fade show w-50" role="alert">
                @ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert"><Icon Name="IconName.X"/></button>
            </div>
        </div>

    }
    <EditForm Model="loginModel" method="post" FormName="LoginForm" OnValidSubmit="HandleLogin">

        <div class="css-1axhzbi">
            <span class="auth_form_header"><h3 class="auth_form_title">Log in to your account</h3></span>
            <DataAnnotationsValidator />  @* Required for form validation *@
            <ValidationSummary style="color:#fff" />
            <div class="auth_form_fields">
                <div class="css-jdqo73">
                    <div class="input_wrapper">
                        <InputText @bind-Value="loginModel.Email" type="email" placeholder="Email address" class="no-zoom-14px" />
                    </div>
                    <p class="email-placement">email error here</p>
                </div>
                <div class="css-1vv7r1s">
                    <div class="input_wrapper">
                        <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" class="no-zoom-14px" />

                        <button class="show_btn" type="button">
                            <svg xmlns="http://www.w3.org/2000/svg"
                            width="14"
                            height="14"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="1.5"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="lucide lucide-eye">
                                <path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            </svg>
                        </button>
                    </div>
                    <p class="password-placement">password error here</p>
                </div>
            </div>
            <br />
            <p class="form_action_text"><a href="/register">Don't have an account?</a></p>
            <p class="form_action_text"><a href="/forgot-password">Forgot your password?</a></p>
            <div class="auth_form_footer">
                <button type="submit" class="css-nncgg"><p>Log in</p></button>
            </div>
        </div>
    </EditForm>
</div>
@code {
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginModel loginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private string ErrorMessage = string.Empty;


    private User? user;

    private async Task HandleLogin()
    {

        user = await UserManager.FindByNameAsync(loginModel.Email);
        if (user != null && await UserManager.CheckPasswordAsync(user, loginModel.Password))
        {
            await setBalance();
            var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, false, false);
            if (result.Succeeded)
            {
                var targetUrl = string.IsNullOrWhiteSpace(ReturnUrl) ? "/user/dashboard" : ReturnUrl;
                NavigationManager.NavigateTo(targetUrl, forceLoad: true); // 🔹 Reload page to prevent rendering issues
            }
            else if (result.IsLockedOut)
            {

            }
            else if (result.IsNotAllowed)
            {
            }
            else if (result.RequiresTwoFactor)
            {
                NavigationManager.NavigateTo("/twofa", forceLoad: true);
            }

        }
        else if(user != null)
        {
            // incorrect password
            ErrorMessage = "Invalid account password!";
            return;
        }
        else
        {
            // account not found
            ErrorMessage = "Account not found!";
            return;
        }
    }

    private async Task setBalance()
    {
        var assets = await ViewAssetsByNameUseCase.Execute();
        List<Balance> balances = new List<Balance>();
        foreach (var asset in assets)
        {
            balances.Add(
            new Balance
                {
                    AssetId = asset.AssetId,
                    UserId = user.UserID,
                    Available = 200,
                    Locked = 0
                }
            );
        }
        await UpdateUserBalanceUseCase.ExecuteAsync(user.UserID, balances);
    }

    public class LoginModel
    {
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
