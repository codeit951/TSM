@page "/user/subscribe"

@layout Layout.UserLayout
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IViewSMSPlansByTypeUseCase ViewSMSPlansByTypeUseCase
@inject UserState State
@implements IAsyncDisposable

<link href="pages/subscribe.css" rel="stylesheet" />

<div class="scrollbar-hide css-66hwna">
    <SubscribeHistoryComponent @rendermode="InteractiveServer" @bind-Transform="historyTransform" />
    <div class="css-6ymeda"></div>
    <div class="css-ud2h04">
        <div class="top">
            <div class="css-y0p2sv">
                <div class="top_wrapper">
                    <span class="balance">
                       
                    </span>
                    <button class="subscribe_balance_button" @onclick="OpenModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-credit-card">
                            <rect width="20" height="14" x="2" y="5" rx="2"></rect>
                            <line x1="2" x2="22" y1="10" y2="10"></line>
                        </svg>
                        <p>Deposit</p>
                    </button>
                </div>
                <span class="subscribe_info_card_top">
                    @if (user is not null)
                {
                        if (user.SMSs.Where(s => s.Status == StatusType.Active && s.PlanType == SMSTypes.Subscription).Count()>0)
                        {
                            <p>@user.SMSs.Where(s => s.Status == StatusType.Active && s.PlanType == SMSTypes.Subscription).Count() active subscription(s)</p>
                        }
                        else
                        {
                            <p>No active subscription</p>
                        }
                   
                }
                    <p class="text-btn view_history" @onclick="ShowHistory">View history</p>
                </span>
            </div>
        </div>
        <div class="mid_section">
            <div class="mid_section_top"><p>Plans</p></div>
            <div class="subscribe_cards_wrapper">
                <div class="grids css-113fuih">
                    @if (plans is not null && plans.Count > 0)
                    {
                        foreach (var plan in plans)
                        {
                            <div class="subscribe_card css-1e50szj">
                                <div class="subscribe_card_top"><p class="subscribe_title">@plan.PlanName</p></div>
                                <div class="subscribe_card_details">
                                    <span class="subscribe_card_detail">
                                        <p>Minumum</p>
                                        <p>@plan.MinimumAmount @plan.PlanSymbol</p>
                                    </span>
                                    <span class="subscribe_card_detail">
                                        <p>Maximum</p>
                                        <p>@plan.MaximumAmount @plan.PlanSymbol</p>
                                    </span>
                                    <span class="subscribe_card_detail">
                                        <p>Plan duration</p>
                                        <p>@plan.Cycle days</p>
                                    </span>
                                    <span class="subscribe_card_detail">
                                        <p>ROI</p>
                                        <p class="roi">@(plan.ROI)%</p>
                                    </span>
                                </div>
                                
                                <div class="subscribe_card_footer">
                                    <button class="css-nncgg" @onclick="()=>ShowStake(plan)"><p>Subscribe</p></button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                            <Placeholder Width="PlaceholderWidth.Col12" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Large" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.ExtraSmall" />
                        </PlaceholderContainer>
                    }
                    
                </div>
            </div>
        </div>
    </div>
</div>
<NewDepositComponent @bind-IsActive="IsDepositActive" @rendermode="InteractiveServer" />
<MineAndStakeModelComponent @ref="smsModel" @bind-IsActive="showStake" @rendermode="InteractiveServer" />
@code {

    private string historyTransform = "100%";

    private bool IsDepositActive = false;

    private bool showStake = false;

    private User? user;

    private List<SMSPlan> plans = new List<SMSPlan>();

    private MineAndStakeModelComponent smsModel;

    private IDisposable _subscription;

    protected override async Task OnInitializedAsync()
    {
        plans = await ViewSMSPlansByTypeUseCase.Execute(SMSTypes.Subscription);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(username))
        {
            user = await UserManager.FindByNameAsync(username);
            State.SetCurrentUser(user);

            _subscription = State.CurrentUserObservable
       .Subscribe(Cuser =>
           {
               user = Cuser;
               StateHasChanged();
           });
        }
    }

    private async Task ShowStake(SMSPlan plan)
    {
        smsModel.plan = plan;
        smsModel.user = user;
        showStake = true;
    }

    private void OpenModal()
    {
        IsDepositActive = true;
    }

    private async Task ShowHistory()
    {
        historyTransform = "0%";
        await JS.InvokeVoidAsync("registerOutsideClickSubscribe", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void CloseHistory()
    {
        historyTransform = "100%";
        StateHasChanged(); // Ensure UI updates
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }
}