@page "/user/signals"

@layout Layout.UserLayout
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IViewSignalsByNameUseCase ViewSignalPlansByNameUseCase
@inject IAddSignalUseCase AddSignalUseCase
@inject UserState State
@implements IAsyncDisposable

<link href="pages/signals.css" rel="stylesheet" />
<ToastComponent @ref="toastComponent" Timeout="3000" />
<div class="scrollbar-hide css-66hwna">
    <SignalsHistoryComponent @bind-Transform="historyTransform" @rendermode="InteractiveServer" />
    <div class="css-6ymeda"></div>
    <div class="css-140tsbc">
        <div class="top">
            <div class="css-1vdt97u">
                <span class="balance">

                </span>
                <button class="signal_balance_button" @onclick="OpenModal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-credit-card">
                        <rect width="20" height="14" x="2" y="5" rx="2"></rect>
                        <line x1="2" x2="22" y1="10" y2="10"></line>
                    </svg>
                    <p>Deposit</p>
                </button>
            </div>
            <div class="css-sqwiyb">
                <span class="signal_info_card_top">
                    @if (user is not null)
                    {
                        if (user.Signals.Where(s => s.Status == StatusType.Active).Count() > 0)
                        {
                            <p>@user.Signals.Where(s => s.Status == StatusType.Active).Count() active signal(s)</p>
                        }
                        else
                        {
                            <p>No active signal</p>
                        }

                    }
                    <p class="text-btn view_history" @onclick="ShowHistory">View history</p>
                </span>
                <div class="signal_info_card_bottom">
                    <div class="signal_strength_wrapper">
                        @if (user is not null)
                        {
                            var totalStrength = user.Signals.Sum(s => s.strength);
                            <span>
                                <p class="account_section_title signal_strength">Signal strength</p>
                                <p class="@(totalStrength==0?"red":"")" style="font-size: 14px; font-weight: 600;">@(totalStrength)%</p>
                            </span>
                            <div class="signal_wrapper">
                                <div class="signal_bar @(totalStrength>=5?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=10?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=15?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=20?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=25?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=30?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=35?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=40?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=45?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=50?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=55?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=60?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=65?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=70?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=75?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=80?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=85?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=90?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=95?"green-bar":"red-bar")"></div>
                                <div class="signal_bar @(totalStrength>=100?"green-bar":"red-bar")"></div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="mid_section">
            <div class="mid_section_top"><p>Signals</p></div>
            <div class="signal_cards_wrapper">
                <div class="grids css-113fuih">

                    @if (plans is not null && plans.Count > 0)
                    {
                        foreach (var plan in plans)
                        {
                            <div class="signal_card css-k9n2yz">
                                <div class="signal_card_top"><p class="signal_title">@plan.PlanName</p></div>
                                <div class="signal_card_details">
                                    <span class="signal_card_detail">
                                        <p>Signal price</p>
                                        <p>$@FormatValues.FormatCurrencyWithMinusForBal(plan.Price)</p>
                                    </span>
                                    <span class="signal_card_detail">
                                        <p>Signal strength</p>
                                        <p class="signal_strength">@(plan.Strength)%</p>
                                    </span>
                                </div>
                                <div class="signal_card_amount">
                                    <div class="css-v6puf8">
                                        <label>Amount</label>
                                        <div class="amountbox_wrapper">
                                            <input type="number" placeholder="2000.000" value="@plan.Price" readonly="" /><span class="amount_select"><p>USD</p></span>
                                        </div>
                                        @if(user is not null)
                                        {
                                            <div class="captions">
                                                <span class="caption">
                                                    <p>Current balance</p>
                                                    <p>$@FormatValues.FormatCurrencyWithMinusForBal(user.Balances.FirstOrDefault(b=>b.Asset.AssetSymbol=="USD").Available)</p>
                                                </span>
                                            </div>
                                        }

                                    </div>
                                </div>
                                <div class="signal_card_footer">
                                    <button class="css-nncgg" @onclick="()=>BuySignal(plan)"><p>Purchase</p></button>
                                </div>
                            </div>
                        }

                    }
                    else
                    {
                        <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                            <Placeholder Width="PlaceholderWidth.Col12" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Large" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.ExtraSmall" />
                        </PlaceholderContainer>
                    }
                </div>
            </div>
        </div>
        <div class="signal_history"></div>
    </div>
</div>
<NewDepositComponent @bind-IsActive="IsDepositActive" @rendermode="InteractiveServer" />
<Preload LoadingText="Loading..." />
@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private string historyTransform = "100%";

    private bool IsDepositActive = false;

    private User? user;

    private List<SignalPlan> plans = new List<SignalPlan>();

    private IDisposable _subscription;

    private string AlertMessage = string.Empty;

    private ToastComponent? toastComponent;

    protected override async Task OnInitializedAsync()
    {
        plans = await ViewSignalPlansByNameUseCase.Execute();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(username))
        {
            user = await UserManager.FindByNameAsync(username);
            State.SetCurrentUser(user);

            _subscription = State.CurrentUserObservable
       .Subscribe(Cuser =>
           {
               user = Cuser;
               StateHasChanged();
           });
        }
    }

    private async Task BuySignal(SignalPlan plan)
    {
        if (user != null)
        {
            PreloadService.Show(SpinnerColor.Light, $"Buying Signal...");
            var signal = new Signal
            {
                UserID = user.UserID,
                    PlanID = plan.PlanID,
                    PlanName = plan.PlanName,
                    Price = plan.Price,
                    Status = StatusType.Active,
                    strength = plan.Strength,
            };
            var status = await AddSignalUseCase.Execute(signal);
            if (status == "0")
            {
                AlertMessage = $"Insufficient USD balance!";
                toastComponent?.ShowToast(MyToastType.Danger, "Signal Error", AlertMessage);
            }
            else if (status == "1")
            {
                // Reset the form after placing the trade
                AlertMessage = $"{plan.PlanName} Bought Successfully!";
                toastComponent?.ShowToast(MyToastType.Success, "Signal", AlertMessage);
                user = await UserManager.FindByNameAsync(user.Email);
                State.SetCurrentUser(user);
            }
            else if (status == "2")
            {
                AlertMessage = "ASSET NOT FOUND!";
                toastComponent?.ShowToast(MyToastType.Danger, "Signal Error", AlertMessage);
            }
            else if (status == "3")
            {
                AlertMessage = "USER NOT FOUND!";
                toastComponent?.ShowToast(MyToastType.Danger, "Signal Error", AlertMessage);
            }

            PreloadService.Hide();
        }
    }

    private void OpenModal()
    {
        IsDepositActive = true;
    }

    private async Task ShowHistory()
    {
        historyTransform = "0%";
        await JS.InvokeVoidAsync("registerOutsideClickSubscribe", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void CloseHistory()
    {
        historyTransform = "100%";
        StateHasChanged(); // Ensure UI updates
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }
}