@page "/user/stake"

@layout Layout.UserLayout
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IViewSMSPlansByTypeUseCase ViewSMSPlansByTypeUseCase
@inject UserState State
@implements IAsyncDisposable

<link href="pages/mining.css" rel="stylesheet" />

<div class="scrollbar-hide css-66hwna">
    <StakeHistoryComponent @bind-Transform="historyTransform" @rendermode="InteractiveServer" />
    <div class="css-6ymeda"></div>
    <div class="css-1euahi7">
        <div class="top">
            <div class="css-14iwxg8">
                 @if (user is not null)
                {
                    <div class="card_balances">

                        <div class="card_balance active">
                            <p class="title">Active stakes:</p>
                            <p class="value">@user.SMSs.Where(s => s.Status == StatusType.Active && s.PlanType == SMSTypes.Staking).Count()</p>

                        </div>
                        <div class="card_balance closed">
                            <p class="title">Closed stakes:</p>
                            <p class="value">@user.SMSs.Where(s => s.Status == StatusType.Completed && s.PlanType == SMSTypes.Staking).Count()</p>

                        </div>
                    </div>
                }
                <span class="stake_balance_button" @onclick="ShowHistory">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-clock">
                        <path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"></path>
                        <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                        <circle cx="8" cy="16" r="6"></circle>
                        <path d="M9.5 17.5 8 16.25V14"></path>
                    </svg>
                    <p>View stakes</p>
                </span>
            </div>
        </div>
        <div class="mid_section">
            <div class="mid_section_top"><p>Pools</p></div>
            <div class="stake_cards_wrapper">
                <div class="grids css-113fuih">
                    @if (plans is not null && plans.Count > 0)
                    {
                        foreach (var plan in plans)
                        {
                            <div class="stake_card css-1abtjwe">
                                <div class="stake_card_top">
                                    <div class="stake_card_info">
                                        <img src="/asseticons/@(plan.PlanSymbol).png" alt="@plan.PlanName icon" />
                                        <span>
                                            <p>@plan.PlanName</p>
                                            <p>@plan.PlanSymbol</p>
                                        </span>
                                    </div>
                                </div>
                                <div class="stake_card_details">
                                    <span class="stake_card_detail">
                                        <p>Minumum</p>
                                        <p>@plan.MinimumAmount @plan.PlanSymbol</p>
                                    </span>
                                    <span class="stake_card_detail">
                                        <p>Maximum</p>
                                        <p>@plan.MaximumAmount @plan.PlanSymbol</p>
                                    </span>
                                    <span class="stake_card_detail">
                                        <p>Cycle</p>
                                        <p>@(plan.Cycle == 1 ? "Daily" : $"Every {plan.Cycle} Days")</p>
                                    </span>
                                </div>
                                <div class="stake_card_footer">
                                    <button class="css-nncgg" @onclick="()=>ShowStake(plan)"><p>Choose this plan</p></button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                            <Placeholder Width="PlaceholderWidth.Col12" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Large" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
                            <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.ExtraSmall" />
                        </PlaceholderContainer>
                    }

                </div>
            </div>
        </div>
    </div>
</div>
<MineAndStakeModelComponent @ref="smsModel" @bind-IsActive="showStake" @rendermode="InteractiveServer" />
@code {
    private string historyTransform = "100%";

    private bool showStake = false;

    private User? user;

    private List<SMSPlan> plans = new List<SMSPlan>();

    private MineAndStakeModelComponent smsModel;

    private IDisposable _subscription;


    protected override async Task OnInitializedAsync()
    {
        plans = await ViewSMSPlansByTypeUseCase.Execute(SMSTypes.Staking);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(username))
        {
            user = await UserManager.FindByNameAsync(username);
            State.SetCurrentUser(user);

            _subscription = State.CurrentUserObservable
       .Subscribe(Cuser =>
           {
               user = Cuser;
               StateHasChanged();
           });
        }
    }

    private async Task ShowHistory()
    {
        historyTransform = "0%";
    }

    private async Task ShowStake(SMSPlan plan)
    {
        smsModel.plan = plan;
        smsModel.user = user;
        showStake = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClickMining", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void CloseHistory()
    {
        historyTransform = "100%";
        StateHasChanged(); // Ensure UI updates
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();
    }
}