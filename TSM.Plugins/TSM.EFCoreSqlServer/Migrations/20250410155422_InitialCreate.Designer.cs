// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSM.EFCoreSqlServer;

#nullable disable

namespace TSM.EFCoreSqlServer.Migrations
{
    [DbContext(typeof(TSMContext))]
    [Migration("20250410155422_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TSM.CoreBusiness.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"));

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FutureLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStar")
                        .HasColumnType("bit");

                    b.Property<string>("MarginLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TradingView")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetName = "Bitcoin",
                            AssetSymbol = "BTC",
                            AssetType = "Crypto",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:BTCUSDT"
                        },
                        new
                        {
                            AssetId = 2,
                            AssetName = "Ethereum",
                            AssetSymbol = "ETH",
                            AssetType = "Crypto",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:ETHUSDT"
                        },
                        new
                        {
                            AssetId = 3,
                            AssetName = "United States Dollars",
                            AssetSymbol = "USD",
                            AssetType = "Fiat",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:LTCUSDT"
                        },
                        new
                        {
                            AssetId = 4,
                            AssetName = "Apple",
                            AssetSymbol = "AAPL",
                            AssetType = "Crypto",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:LTCUSDT"
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("Available")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Locked")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BalanceId");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("TSM.CoreBusiness.Trade", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CopiedTradeID")
                        .HasColumnType("int");

                    b.Property<Guid>("CopiedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("FeePaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCopied")
                        .HasColumnType("bit");

                    b.Property<string>("Leverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TakeProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TSM.CoreBusiness.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Default_Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_2FAKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("0f0ffd14-6e96-4ed8-9f91-8306ef42e943"),
                            Country = "United States",
                            CreatedOn = new DateTime(2025, 4, 10, 15, 54, 20, 665, DateTimeKind.Utc).AddTicks(6570),
                            Default_Currency = "USD",
                            Email = "Test@gmail.com",
                            EmailStatus = 1,
                            FirstName = "Test",
                            LastLogin = new DateTime(2025, 4, 10, 15, 54, 20, 665, DateTimeKind.Utc).AddTicks(6767),
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAENO/b30WB3r+Z9XXAJw8IYQNKcaiKeemI6VHHuY/iS9vFEp7xN9a1y2vUz1eKQ/OkQ==",
                            Phone = "1234567890",
                            Plan = "Starter",
                            ReferralCode = "Test123",
                            ReferrerCode = "Test123",
                            Roles = "[\"User\"]",
                            Status = 0,
                            _2FAKey = ""
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Balance", b =>
                {
                    b.HasOne("TSM.CoreBusiness.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Balances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TSM.CoreBusiness.Trade", b =>
                {
                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Trades")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TSM.CoreBusiness.User", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
