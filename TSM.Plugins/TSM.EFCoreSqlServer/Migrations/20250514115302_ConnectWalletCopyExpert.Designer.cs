// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSM.EFCoreSqlServer;

#nullable disable

namespace TSM.EFCoreSqlServer.Migrations
{
    [DbContext(typeof(TSMContext))]
    [Migration("20250514115302_ConnectWalletCopyExpert")]
    partial class ConnectWalletCopyExpert
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TSM.CoreBusiness.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"));

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FutureLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStar")
                        .HasColumnType("bit");

                    b.Property<string>("MarginLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotLeverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TradingView")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetName = "Bitcoin",
                            AssetSymbol = "BTC",
                            AssetType = "Crypto",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:BTCUSDT"
                        },
                        new
                        {
                            AssetId = 2,
                            AssetName = "Ethereum",
                            AssetSymbol = "ETH",
                            AssetType = "Crypto",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:ETHUSDT"
                        },
                        new
                        {
                            AssetId = 3,
                            AssetName = "United States Dollars",
                            AssetSymbol = "USD",
                            AssetType = "Fiat",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:LTCUSDT"
                        },
                        new
                        {
                            AssetId = 4,
                            AssetName = "Apple",
                            AssetSymbol = "AAPL",
                            AssetType = "Stock",
                            FutureLeverage = "",
                            IsStar = true,
                            MarginLeverage = "",
                            SpotLeverage = "",
                            Status = 1,
                            TradingView = "BITGET:LTCUSDT"
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("Available")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Locked")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BalanceId");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("TSM.CoreBusiness.ConnectWallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletID"));

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WalletID");

                    b.ToTable("ConnectWallets");

                    b.HasData(
                        new
                        {
                            WalletID = 1,
                            WalletName = "Aktionariat Wallet"
                        },
                        new
                        {
                            WalletID = 2,
                            WalletName = "Binance"
                        },
                        new
                        {
                            WalletID = 3,
                            WalletName = "Bitcoin Wallet"
                        },
                        new
                        {
                            WalletID = 4,
                            WalletName = "Bitkeep Wallet"
                        },
                        new
                        {
                            WalletID = 5,
                            WalletName = "Bitpay"
                        },
                        new
                        {
                            WalletID = 6,
                            WalletName = "Blockchain"
                        },
                        new
                        {
                            WalletID = 7,
                            WalletName = "Coinbase"
                        },
                        new
                        {
                            WalletID = 8,
                            WalletName = "Coinbase One"
                        },
                        new
                        {
                            WalletID = 9,
                            WalletName = "Crypto Wallet"
                        },
                        new
                        {
                            WalletID = 10,
                            WalletName = "Exodus Wallet"
                        },
                        new
                        {
                            WalletID = 11,
                            WalletName = "Gemini"
                        },
                        new
                        {
                            WalletID = 12,
                            WalletName = "Imtoken"
                        },
                        new
                        {
                            WalletID = 13,
                            WalletName = "Infinito Wallet"
                        },
                        new
                        {
                            WalletID = 14,
                            WalletName = "Infinity Wallet"
                        },
                        new
                        {
                            WalletID = 15,
                            WalletName = "Keyringpro Wallet"
                        },
                        new
                        {
                            WalletID = 16,
                            WalletName = "Metamask"
                        },
                        new
                        {
                            WalletID = 17,
                            WalletName = "Ownbit Wallet"
                        },
                        new
                        {
                            WalletID = 18,
                            WalletName = "Phantom Wallet"
                        },
                        new
                        {
                            WalletID = 19,
                            WalletName = "Pulse Wallet"
                        },
                        new
                        {
                            WalletID = 20,
                            WalletName = "Rainbow"
                        },
                        new
                        {
                            WalletID = 21,
                            WalletName = "Robinhood Wallet"
                        },
                        new
                        {
                            WalletID = 22,
                            WalletName = "Robinhood Wallet"
                        },
                        new
                        {
                            WalletID = 23,
                            WalletName = "Sparkpoint Wallet"
                        },
                        new
                        {
                            WalletID = 24,
                            WalletName = "Trust Wallet"
                        },
                        new
                        {
                            WalletID = 25,
                            WalletName = "Uniswap"
                        },
                        new
                        {
                            WalletID = 26,
                            WalletName = "Wallet io"
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.ConnectedWallet", b =>
                {
                    b.Property<int>("CWID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CWID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("walletID")
                        .HasColumnType("int");

                    b.HasKey("CWID", "UserID");

                    b.ToTable("ConnectedWallets");
                });

            modelBuilder.Entity("TSM.CoreBusiness.CopiedExpert", b =>
                {
                    b.Property<int>("CopyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopyID"));

                    b.Property<DateTime>("CopyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CopyTraderID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CopyID");

                    b.ToTable("CopiedExperts");
                });

            modelBuilder.Entity("TSM.CoreBusiness.CopyTrader", b =>
                {
                    b.Property<int>("CopyTraderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopyTraderID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CopierCount")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("ProfitShare")
                        .HasColumnType("int");

                    b.Property<byte[]>("TraderImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TraderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WinRate")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("CopyTraderID", "UserID");

                    b.ToTable("CopyTraders");
                });

            modelBuilder.Entity("TSM.CoreBusiness.SMS", b =>
                {
                    b.Property<int>("SMSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SMSID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.Property<decimal>("ROI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SMSID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("SMSs");
                });

            modelBuilder.Entity("TSM.CoreBusiness.SMSPlan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanID"));

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.Property<int>("ROI")
                        .HasColumnType("int");

                    b.HasKey("PlanID");

                    b.ToTable("SMSPlans");

                    b.HasData(
                        new
                        {
                            PlanID = 1,
                            Cycle = 1,
                            MaximumAmount = 1000m,
                            MinimumAmount = 100m,
                            PlanName = "BitcoinPool12",
                            PlanSymbol = "BTC",
                            PlanType = 0,
                            ROI = 10
                        },
                        new
                        {
                            PlanID = 2,
                            Cycle = 1,
                            MaximumAmount = 1000m,
                            MinimumAmount = 100m,
                            PlanName = "Dogecoin",
                            PlanSymbol = "DOGE",
                            PlanType = 1,
                            ROI = 15
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Signal", b =>
                {
                    b.Property<int>("SignalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SignalID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BoughtDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("strength")
                        .HasColumnType("int");

                    b.HasKey("SignalID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("TSM.CoreBusiness.SignalPlan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanID"));

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("PlanID");

                    b.ToTable("SignalPlans");

                    b.HasData(
                        new
                        {
                            PlanID = 1,
                            PlanName = "Starter",
                            Price = 100m,
                            Strength = 10
                        },
                        new
                        {
                            PlanID = 2,
                            PlanName = "Pro",
                            Price = 200m,
                            Strength = 25
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Trade", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CopiedTradeID")
                        .HasColumnType("int");

                    b.Property<Guid>("CopiedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("FeePaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCopied")
                        .HasColumnType("bit");

                    b.Property<string>("Leverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Loss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StopLoss")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Symbol1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TakeProfit")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TSM.CoreBusiness.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CopiedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForCopied")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TSM.CoreBusiness.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Default_Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_2FAKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("11111111-1111-1111-1111-111111111111"),
                            Country = "United States",
                            CreatedOn = new DateTime(2025, 4, 23, 16, 1, 19, 739, DateTimeKind.Local).AddTicks(6017),
                            Default_Currency = "USD",
                            Email = "Test@gmail.com",
                            EmailStatus = 1,
                            ExpertId = 0,
                            FirstName = "Test",
                            LastLogin = new DateTime(2025, 4, 23, 16, 1, 19, 739, DateTimeKind.Local).AddTicks(6017),
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAENO/b30WB3r+Z9XXAJw8IYQNKcaiKeemI6VHHuY/iS9vFEp7xN9a1y2vUz1eKQ/OkQ==",
                            Phone = "1234567890",
                            Plan = "Starter",
                            ReferralCode = "Test123",
                            ReferrerCode = "Test123",
                            Roles = "[\"User\"]",
                            Status = 0,
                            _2FAKey = ""
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.WalletAddress", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoinType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("WalletID");

                    b.ToTable("WalletAddresses");

                    b.HasData(
                        new
                        {
                            WalletID = 1,
                            Address = "0x1234567890abcdef1234567890abcdef12345678",
                            CoinName = "Bitcoin",
                            CoinType = "BTC",
                            Network = "Blockchain",
                            Status = 1
                        },
                        new
                        {
                            WalletID = 2,
                            Address = "0xabcdef1234567890abcdef1234567890abcdef12",
                            CoinName = "Etherum",
                            CoinType = "ETH",
                            Network = "Blockchain",
                            Status = 1
                        });
                });

            modelBuilder.Entity("TSM.CoreBusiness.Balance", b =>
                {
                    b.HasOne("TSM.CoreBusiness.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Balances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TSM.CoreBusiness.SMS", b =>
                {
                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("SMSs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TSM.CoreBusiness.Signal", b =>
                {
                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Signals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TSM.CoreBusiness.Trade", b =>
                {
                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Trades")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TSM.CoreBusiness.Transaction", b =>
                {
                    b.HasOne("TSM.CoreBusiness.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TSM.CoreBusiness.User", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("SMSs");

                    b.Navigation("Signals");

                    b.Navigation("Trades");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
